@placeValue: ~'top', ~'right', ~'bottom', ~'left';

.border {
    border: @border-width solid @color-border;
}

.border-0 {
    border-width: 0;
}

.border-place();

.rounded,
.rounded-circle,
.rounded-top,
.rounded-right,
.rounded-bottom,
.rounded-left {
    overflow: hidden;
    border-radius: 0;
}

.rounded {
    border-radius: 5%;
}

.rounded-circle {
    border-radius: 50%;
}

.rounded-top {
    border-top-left-radius: 5%;
    border-top-right-radius: 5%;
}

.rounded-right {
    border-top-right-radius: 5%;
    border-bottom-right-radius: 5%;
}

.rounded-bottom {
    border-bottom-right-radius: 5%;
    border-bottom-left-radius: 5%;
}

.rounded-left {
    border-top-left-radius: 5%;
    border-bottom-left-radius: 5%;
}

.border-color();

.border-place(@i:length(@placeValue)) when(@i > 0) {
    @place: extract(@placeValue, @i);
    @border: ~'border-@{place}-0';

    .border-@{place} {
        border-@{place}: @border-width solid @color-border;
    }

    .@{border} {
        border-@{place}-width: 0;
    }

    .border-place(@i - 1);
}

.border-color(@i:length(@style)) when(@i > 0) {
    @name: extract(@style, @i);

    .border-@{name} {
        @value: ~'color-@{name}';

        border-color: @@value;
    }

    .border-@{name}-light {
        @value: ~'color-@{name}-light';

        border-color: @@value;
    }

    .border-color(@i - 1);
}
